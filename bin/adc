#!/usr/bin/env ruby
#
# adelheid client
#
# MIT License
# (c) Thorsten Hirsch, 2016

require 'json'
require 'optparse'
require 'net/http'

module VERSION
    MAJOR = 1
    MINOR = 0
    STRING = [MAJOR, MINOR].compact.join(".")
end

CONFIGFILE = ENV['HOME'] + "/.adcrc"
DEFAULTURL = "http://localhost:3000/api"
VALIDKEYS  = %w( env url key )
NOTREADY   = "You must set env, url, and key first."
BANNER =<<EOF
usage: (1) adc deploy -a <artifact> -v <version> [-n <notes>]              send deployment
       (2) adc list [-e <environment|-a <artifact>]                        show latest deployments
       (3) adc set env <environment>|url <server-url>|key <api-key>        set mandatory configuration
       (4) adc get [env|url|key]                                           get configuration
       (5) adc version                                                     print adc version
EOF

# parse args
OptionParser.new do |o|
    o.on('-a <artifact>', 'artifact')       { |a| $artifact = a }
    o.on('-v <version>', 'version')         { |v| $version = v }
    o.on('-n <notes>', 'notes')             { |n| $notes = n }
    o.on('-e <environment>', 'environment') { |e| $environment = e }
    o.on('-d', 'debug mode')                { $debug = 1 }
    o.on('-h', 'help')                      { puts o; exit }

    @args = o.parse!
end

# main
case @args[0]
when 'deploy'
    (puts BANNER; exit) if @args.size != 1
    readconfig
    abort NOTREADY unless $config['env'] and $config['key']
    deploy
when 'list'
    (puts BANNER; exit) if @args.size != 1
    readconfig
    abort NOTREADY unless $config['env'] and $config['key']
    list
when 'set'
    (puts BANNER; exit) if @args.size != 3
    abort "unknown setting: #{@args[1]}" if !VALIDKEYS.include?(@args[1])
    readconfig
    updateconfig(@args[1], @args[2])
when 'get'
    (puts BANNER; exit) if @args.size != 2
    abort "unknown setting: #{@args[1]}" if !VALIDKEYS.include?(@args[1])
    readconfig
    puts $config[@args[1]]
when 'version'
    puts VERSION::STRING
else
    puts BANNER
    abort "unknown action: #{@args[0]}" unless @args[0].nil?
end
exit

# subs
BEGIN {
    def readconfig
      File.open(CONFIGFILE, "r") do |f|
          $config = JSON.parse(f.read)
      end if File.file?(CONFIGFILE)

      $config ||= Hash.new
      $config['url'] ||= DEFAULTURL
    end

    def updateconfig(key, value)
      $config[key] = value
      File.open(CONFIGFILE, "w") do |f|
          f.write JSON.pretty_generate($config)
      end
    end

    def send_request(foo)
        uri = URI($config['url'])
        http = Net::HTTP.new(uri.host, uri.port)
        request = Net::HTTP::Get.new(uri)
        request['authorization'] = "Token token=#{$config['key']}"
        response = http.request request

        response
    end

    def deploy
        response = send_request
        JSON.parse(response)
    end

    def list
        response = send_request
        JSON.parse(response)
    end
}
